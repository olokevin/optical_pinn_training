[basic]
device = cuda:0
; experiment_root = exp
experiment_name = exp

[pretrained]
incre = False
; incre = True
# r = 2
load_model_path = /home/user_name/Project/ONN/zo_tonn_training/PINNs/HJB_20d_FD/exp/tensorized_dnn/512/blocktt/2/gradients_sparse_grid/adam/steplr/expscr_lr_1e-3/384409/checkpoints/model_epoch_10000.pth
pruned = False

[dataio]
batch_size = 100

[loss_func]
val_every = True
; val_every = False
; gradient_func = gradients_auto_diff
gradient_func = gradients_cd2
sigma = 0.01
; gradient_func = gradients_stein
; sigma = 0.1
; gradient_func = gradients_sparse_grid
; sigma = 0.1


[model]
type = tensorized_dnn

###### TTM ######
in_features = 21
out_features = 1
; hidden_features = 1024
; shape_list = [[[1,1,3,7],[8,4,8,4]], [[4,8,4,8],[8,4,8,4]], []]
hidden_features = 512
shape_list = [[[1,1,3,7],[8,4,4,4]], [[4,4,4,8],[8,4,4,4]], []]
num_layers = 3
nonlinearity = sine

order = 5
min_dim = 2
; factorization = tt
factorization = blocktt
; shape_list = [[[4,8,4,8],[8,4,8,4]], [[4,8,4,8],[8,4,8,4]], []]
rank = 2
tensorize_first = True
tensorize_last = False

###### TT ######
; in_features = 21
; out_features = 1
; hidden_features = 768
; num_layers = 3
; nonlinearity = sine

; order = 5
; min_dim = 2
; factorization = tt
; ; shape_list=[[],[],[]]
; rank = 4
; ; rank = 10
; tensorize_first = True
; tensorize_last = False

; bias = False
bias = True
dtype

[training]

lr = 1e-3
; epochs = 10000
; epochs_til_checkpoints = 1000
; epochs_til_val = 100
epochs = 2000
epochs_til_checkpoints = 2000
epochs_til_val = 10
start_epoch = 0
lr_decay = True
; verbose = True
verbose = False

random_state = 0
; random_state = 121

; ============= optimizer =============
debug = False

optimizer = adam
; optimizer = sgd

; optimizer = ZO_SGD_mask
; sigma = 0.1
; n_sample = 10
; signsgd = True
; layer_by_layer = False
; opt_layers_strs = ['TensorizedLinear', 'nn.Linear']
; sample_method = gaussian

; optimizer = ZO_SGD_mask
; sigma = 0.1
; n_sample = 1
; signsgd = True
; layer_by_layer = False
; opt_layers_strs = ['TensorizedLinear', 'nn.Linear']
; sample_method = bernoulli

; optimizer = ZO_SCD_mask
; grad_sparsity = 0.5
; grad_estimator = batch
; h_smooth = 0.1
; opt_layers_strs = ['TensorizedLinear', 'nn.Linear']
; momentum = 0

; optimizer = ZO_mix
; sigma = 0.1
; n_sample = 10
; signsgd = True
; layer_by_layer = False
; opt_layers_strs = ['TensorizedLinear', 'nn.Linear']
; sample_method = gaussian

; patience = 5

; grad_sparsity = 0
; grad_estimator = esti
; h_smooth = 0.1
; STP = False
; momentum = 0.9

; ============= scheduler =============

scheduler = steplr
epochs_til_decay = 1000
gamma = 1

; scheduler = PresetLRScheduler
; lr_schedule = {0: 1, 5000: 0.5, 8000: 0.1}

; scheduler = PresetLRScheduler
; lr_schedule = {0: 1, 10000: 0.5, 20000: 0.1, 30000:0.05, 40000:0.01}

; scheduler = ExponentialLR
; gamma = 0.999
; epoch_wise = False

[validation]


[evaluation]
plot = True


[GraSP]
pruner = False
pruner_file = False

exception = -1
iterations = 1
normalize = false
target_ratio = 0.999
num_iters = 1

; ============= ZO_Estim =============
[ZO_Estim]
; en = False
en = True
name = ZO_Estim_MC
sigma = 0.01
n_sample = 1
signsgd = False

scale = null
; scale = sqrt_dim
; scale = dim

actv_perturb_layer_list = null
; actv_perturb_layer_list = ['inverted_bottleneck.conv',]
; actv_perturb_layer_list = ['inverted_bottleneck.conv', 'point_linear.conv']
; actv_perturb_block_idx_list = all
; actv_perturb_block_idx_list = [-2,]

; param_perturb_param_list = null
; param_perturb_param_list = ['weight', ]
param_perturb_param_list = ['factors', 'tt_cores','bias', 'weight']
param_perturb_block_idx_list = all
; param_perturb_block_idx_list = [8,]

; obj_fn_type = classifier
; obj_fn_type = classifier_layerwise
obj_fn_type = pinn

quantized = False

en_layerwise_perturbation = True
; en_layerwise_perturbation = False
en_partial_forward = False

en_param_commit = True

; estimate_method = forward
estimate_method = antithetic

; sample_method = uniform
; sample_method = gaussian
; sample_method = bernoulli
sample_method = coord_basis

normalize_perturbation = False
; normalize_perturbation = True